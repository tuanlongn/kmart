// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./__generated__/pothos-types.ts"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders       Order[]
  transactions Transaction[]
  cartItems    CartItem[]
  AuthProvider AuthProvider[]

  @@map("users")
}

model AuthProvider {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String   @map("provider_type")
  provider          String   @map("provider")
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token") @db.LongText
  expiresAt         Int?     @map("expires_at")
  tokenType         String?  @map("token_type")
  scope             String?
  idToken           String?  @map("id_token") @db.Text
  sessionState      String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("auth_providers")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(2000)
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  categoriesOnProducts CategoriesOnProducts[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(2000)
  labelPrice  Float?   @map("label_price")
  active      Boolean  @default(true)
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  cartItems            CartItem[]
  inventoryItems       InventoryItem[]
  variants             ProductVariant[]
  categoriesOnProducts CategoriesOnProducts[]

  @@map("products")
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @map("product_id")
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String   @map("assigned_by")

  @@id([productId, categoryId])
  @@map("categories_on_products")
}

model ProductVariant {
  id        String       @id @default(cuid())
  product   Product      @relation(fields: [productId], references: [id])
  productId String       @map("product_id")
  price     Float
  title     String?
  barcode   String?      @db.Char(13)
  image     ProductImage @relation(fields: [imageId], references: [id])
  imageId   String       @map("image_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  inventoryItems InventoryItem[]
  cartItems      CartItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String   @id @default(cuid())
  position  Int      @db.UnsignedTinyInt
  source    String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProductVariant ProductVariant[]
  @@map("product_images")
}

model InventoryItem {
  id               String         @id @default(cuid())
  sku              String         @unique
  product          Product        @relation(fields: [productId], references: [id])
  productId        String         @map("product_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String         @map("product_variant_id")
  price            Float
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("inventory_items")
}

enum CartItemStatus {
  HOLD
  PAID
}

model CartItem {
  id               String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @map("user_id")
  product          Product        @relation(fields: [productId], references: [id])
  productId        String         @map("product_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String         @map("product_variant_id")
  quantity         Int
  status           CartItemStatus @default(HOLD)
  addAt            DateTime       @map("add_at")

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@unique([userId, productId])
  @@map("cart_items")
}

enum OrderStatus {
  UNPAID
  PAID
  CANCELED
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @map("user_id")
  status    OrderStatus @default(UNPAID)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  items        CartItem[]
  transactions Transaction[]

  @@map("orders")
}

enum PaymentTypes {
  MOMO
  BANK_TRANSFER
  CASH
  VOUCHER
}

model Transaction {
  id          String       @id @default(cuid())
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     String       @map("order_id")
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @map("user_id")
  paymentType PaymentTypes @default(CASH)
  quantity    Int?         @db.UnsignedTinyInt
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("transactions")
}
